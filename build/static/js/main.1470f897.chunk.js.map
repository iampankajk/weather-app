{"version":3,"sources":["components/Geolocation.module.css","components/Form.js","components/Geolocation.js","components/Hour.js","App.js","index.js","components/Form.module.css","components/Hour.module.css"],"names":["module","exports","Form","getWeather","city","useRef","submitHandler","e","preventDefault","enteredCity","current","value","fetch","res","json","data","coord","lat","lon","className","styles","form","onSubmit","src","alt","cloud","input","ref","button","Geolocation","sunrise","sunset","temp","icon","humidity","wind_speed","feels_like","console","log","Date","toTimeString","split","toFixed","weather","container","title","infoBox","time","img","eff","Hour","hourly","map","item","date","dt","id","Math","random","toString","slice","App","useState","setWeather","currentCity","setCurrentCity","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","getWeatherOnLocation","latitude","longitude","results","formatted","prevState","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1470f897.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Geolocation_container__1BZpZ\",\"title\":\"Geolocation_title__uGLzc\",\"infoBox\":\"Geolocation_infoBox__1PIgL\",\"img\":\"Geolocation_img__2RY9M\",\"time\":\"Geolocation_time__1diMW\",\"eff\":\"Geolocation_eff__DsV8e\"};","import React, { useRef } from \"react\";\nimport styles from \"./Form.module.css\";\n\nconst Form = ({ getWeather }) => {\n  const city = useRef(\"\");\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    const enteredCity = city.current.value;\n    let res = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&appid=2d1b7d0c1cb8298b08ab15e2f4c3b160`\n    );\n    let data = await res.json();\n    let coord = data.coord;\n    getWeather(coord.lat, coord.lon);\n  };\n\n  return (\n    <form className={styles.form} onSubmit={submitHandler}>\n      <h2>Weather App</h2>\n      <img\n        src=\"https://i.ibb.co/BgVKLzW/cloud.png\"\n        alt=\"cloud\"\n        className={styles.cloud}\n      />\n      <div>\n        <input className={styles.input} ref={city}></input>\n        <button className={styles.button}>Search</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import styles from \"./Geolocation.module.css\";\n\nconst Geolocation = ({ data, city }) => {\n  console.log(data);\n  let sunrise;\n  let sunset;\n  let temp;\n  let icon;\n  let humidity;\n  let wind_speed;\n  let feels_like;\n  if (data) {\n    sunrise = new Date(data.current.sunrise * 1000).toTimeString();\n    sunrise = sunrise.split(\":\");\n    +sunrise[0] >= 12\n      ? (sunrise = sunrise[0] + \":\" + sunrise[1] + \" PM\")\n      : (sunrise = sunrise[0] + \":\" + sunrise[1] + \" AM\");\n    sunset = new Date(data.current.sunset * 1000).toTimeString();\n    sunset = sunset.split(\":\");\n    +sunset[0] >= 12\n      ? (sunset = sunset[0] + \":\" + sunset[1] + \" PM\")\n      : (sunset = sunset[0] + \":\" + sunset[1] + \" AM\");\n\n    temp = (data.current.temp - 273).toFixed(1) + \"°C\";\n    feels_like = (data.current.feels_like - 273).toFixed(1) + \"°C\";\n    humidity = data.current.humidity;\n    wind_speed = data.current.wind_speed;\n    icon = data.current.weather[0].icon;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <p>Geolocation: {city}</p>\n      </div>\n      <div className={styles.infoBox}>\n        <div>\n          <div className={styles.time}>\n            <img\n              src=\"https://i.ibb.co/vPf9PtP/sunrise-sunset-icon-sun-vector-logo-isolated-white-background-231786-4729-removebg-preview.png\"\n              className={styles.img}\n              alt=\"sunrise\"\n            />\n            <div>\n              <span>sunrise</span>\n              <p>{sunrise}</p>\n            </div>\n          </div>\n          <div>\n            <div>\n              {icon && (\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt={icon}\n                ></img>\n              )}\n            </div>\n            <h1>{temp}</h1>\n          </div>\n        </div>\n        <div>\n          <div className={styles.time}>\n            <img\n              src=\"https://i.ibb.co/vPf9PtP/sunrise-sunset-icon-sun-vector-logo-isolated-white-background-231786-4729-removebg-preview.png\"\n              className={styles.img}\n              alt=\"sunrise\"\n            />\n            <div>\n              <span>sunset</span>\n              <p>{sunset}</p>\n            </div>\n          </div>\n          <div>\n            {humidity && <p>humidity: {humidity}%</p>}\n            {wind_speed && <p>wind speed: {wind_speed}km/hr</p>}\n            {feels_like && <p>temp feels like: {feels_like}</p>}\n          </div>\n        </div>\n      </div>\n      <div className={styles.eff}>\n        <p>current efficiency</p>\n        <p>85%</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Geolocation;\n","import styles from \"./Hour.module.css\";\nconst Hour = ({ data }) => {\n  if (data) {\n    data = data.hourly.map((item) => {\n      let date = new Date(item.dt * 1000).toTimeString();\n      date = date.split(\":\");\n      +date[0] >= 12\n        ? (date = date[0] + \":\" + date[1] + \" PM\")\n        : (date = date[0] + \":\" + date[1] + \" AM\");\n\n      let temp = (item.temp - 273).toFixed(1) + \"°C\";\n      return {\n        time: date,\n        temp: temp,\n        icon: item.weather[0].icon,\n        id: Math.random(100).toString(),\n      };\n    });\n    data = data.slice(0, 6);\n  }\n\n  let item = data ? (\n    data.map((item) => {\n      return (\n        <div key={item.id}>\n          <div>\n            <img\n              src={`http://openweathermap.org/img/w/${item.icon}.png`}\n              alt={item.icon}\n            ></img>\n          </div>\n          <div>\n            <h4>{item.temp}</h4>\n          </div>\n          <div>\n            <p>{item.time}</p>\n          </div>\n        </div>\n      );\n    })\n  ) : (\n    <p>Data is Loading....</p>\n  );\n\n  return <div className={styles.container}>{item}</div>;\n};\n\nexport default Hour;\n","import React, { useEffect, useState } from \"react\";\nimport Form from \"./components/Form\";\nimport Geolocation from \"./components/Geolocation\";\nimport Hour from \"./components/Hour\";\n\nfunction App() {\n  const [weather, setWeather] = useState(\"\");\n  const [currentCity, setCurrentCity] = useState(\"\");\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(success);\n    function success(pos) {\n      const crd = pos.coords;\n      getWeatherOnLocation(crd.latitude, crd.longitude);\n    }\n  };\n\n  useEffect(() => {\n    if (!weather) {\n      getLocation();\n    }\n  });\n\n  const getWeatherOnLocation = async (lat, lon) => {\n    let res = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=daily&appid=2d1b7d0c1cb8298b08ab15e2f4c3b160`\n    );\n    let data = await res.json();\n\n    let city = await fetch(\n      `https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lon}&key=c5e7e9d67f7b4965bee9b4b0f2b077d9`\n    );\n    city = await city.json();\n    city = city.results[0].formatted;\n    setWeather((prevState) => (prevState = data));\n    setCurrentCity(city);\n  };\n\n  return (\n    <div>\n      <Form getWeather={getWeatherOnLocation}></Form>\n      <Geolocation data={weather} city={currentCity}></Geolocation>\n      <Hour data={weather}></Hour>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2hemT\",\"cloud\":\"Form_cloud__2_Auo\",\"input\":\"Form_input__Vfo9P\",\"button\":\"Form_button__DF5Bm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Hour_container__2mADc\"};"],"sourceRoot":""}